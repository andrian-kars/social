{"version":3,"sources":["components/Login/Login.module.scss","components/Login/LoginForm.tsx","components/Login/LoginPage.tsx"],"names":["module","exports","LoginReduxForm","reduxForm","form","handleSubmit","error","captchaUrl","onSubmit","className","s","summaryError","summary","textInputWhrapper","createField","required","Input","type","src","alt","checkInputWhrapper","undefined","btn","LoginPage","memo","useSelector","state","auth","isAuth","dispatch","useDispatch","to","login","circlesContainer","circleSmall","circleMedium","circleLarge","circleXLarge","circleXXLarge","loginWhrapper","loginForm","heading","FormData","email","password","rememberMe","captcha","onClick","test"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,iBAAmB,gCAAgC,YAAc,2BAA2B,qBAAqB,kCAAkC,aAAe,4BAA4B,YAAc,2BAA2B,aAAe,4BAA4B,cAAgB,6BAA6B,cAAgB,6BAA6B,UAAY,yBAAyB,QAAU,uBAAuB,KAAO,oBAAoB,aAAe,4BAA4B,QAAU,uBAAuB,kBAAoB,iCAAiC,mBAAqB,kCAAkC,IAAM,mBAAmB,QAAU,uBAAuB,KAAO,sB,wIC6CtuBC,EAFQC,YAAkD,CAAEC,KAAM,SAA1DD,EA5BoF,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAC/H,OACI,uBAAMC,SAAUH,EAAcI,UAAWC,IAAEN,KAA3C,UACKE,EACK,qBAAKG,UAAWC,IAAEC,aAAlB,SAAiCL,IACjC,qBAAKG,UAAWC,IAAEE,QAAlB,gFAEN,sBAAKH,UAAWC,IAAEG,kBAAlB,UACI,iDACCC,YAAqC,QAAS,QAAS,CAACC,KAAWC,QAExE,sBAAKP,UAAWC,IAAEG,kBAAlB,UACI,4CACCC,YAAqC,WAAY,WAAY,CAACC,KAAWC,IAAO,CAAEC,KAAM,gBAE5FV,GAAc,qBAAKW,IAAKX,EAAYY,IAAI,YACxCZ,GAAc,qBAAKE,UAAWC,IAAEG,kBAAlB,SAAsCC,YAAqC,qBAAsB,UAAW,CAACC,KAAWC,OACvI,sBAAKP,UAAWC,IAAEU,mBAAlB,UACI,gCACKN,iBAAqCO,EAAW,aAAc,GAAIL,IAAO,CAAEC,KAAM,aAClF,kDAEJ,wBAAQR,UAAWC,IAAEY,IAArB,8B,8BCvBHC,EAAsBC,gBAAK,WACpC,IAAMjB,EAAakB,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKpB,cAC7DqB,EAASH,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKC,UAEzDC,EAAWC,cAKjB,OAAIF,EAAiB,cAAC,IAAD,CAAUG,GAAI,aAG/B,sBAAKtB,UAAWC,IAAEsB,MAAlB,UACI,sBAAKvB,UAAWC,IAAEuB,iBAAlB,UACI,qBAAKxB,UAAWC,IAAEwB,cAClB,qBAAKzB,UAAWC,IAAEyB,eAClB,qBAAK1B,UAAWC,IAAE0B,cAClB,qBAAK3B,UAAWC,IAAE2B,eAClB,qBAAK5B,UAAWC,IAAE4B,mBAEtB,qBAAK7B,UAAWC,IAAE6B,cAAlB,SACI,sBAAK9B,UAAWC,IAAE8B,UAAlB,UACI,oBAAI/B,UAAWC,IAAE+B,QAAjB,qBACA,cAAC,EAAD,CAAgBjC,SAjBf,SAACkC,GAAoCb,EAASG,YAAMU,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,WAiBlFvC,WAAYA,IAChD,mEAAqC,sBAAMwC,QAjBrC,WAAQlB,EAASG,YAAM,kCAAmC,aAAa,EAAO,QAiBjBvB,UAAWC,IAAEsC,KAA3C","file":"static/js/3.d361af30.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__10IcO\",\"circlesContainer\":\"Login_circlesContainer__1O2xc\",\"circleSmall\":\"Login_circleSmall__1556X\",\"circle-small-scale\":\"Login_circle-small-scale__2CtUd\",\"circleMedium\":\"Login_circleMedium__2AbZe\",\"circleLarge\":\"Login_circleLarge__2USDv\",\"circleXLarge\":\"Login_circleXLarge__3RM8U\",\"circleXXLarge\":\"Login_circleXXLarge__1HAPA\",\"loginWhrapper\":\"Login_loginWhrapper__7qcCT\",\"loginForm\":\"Login_loginForm__32H5B\",\"heading\":\"Login_heading__3r5ix\",\"form\":\"Login_form__1tdal\",\"summaryError\":\"Login_summaryError__1Hlqe\",\"summary\":\"Login_summary__3ffEk\",\"textInputWhrapper\":\"Login_textInputWhrapper__2kqj3\",\"checkInputWhrapper\":\"Login_checkInputWhrapper__1PLcO\",\"btn\":\"Login_btn__3S0Pc\",\"btnFree\":\"Login_btnFree__9RgFv\",\"test\":\"Login_test__1R2wt\"};","import { InjectedFormProps, reduxForm } from 'redux-form'\nimport s from './Login.module.scss'\nimport { createField, GetStringKeys, Input } from '../common/FormsControls/FormsControls'\nimport { required } from '../../utils/validators'\n\ntype LoginFormValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string | null\n}\n\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\n\ntype LoginFormOwnProps = { captchaUrl: string | null }\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({ handleSubmit, error, captchaUrl }) => {\n    return (\n        <form onSubmit={handleSubmit} className={s.form}>\n            {error\n                ? <div className={s.summaryError}>{error}</div> \n                : <div className={s.summary}>Enter your email address and password or use free account for test</div>\n            }\n            <div className={s.textInputWhrapper}>\n                <span>Email address</span>\n                {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], Input)}\n            </div>\n            <div className={s.textInputWhrapper}>\n                <span>Password</span>\n                {createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, { type: 'password'})}\n            </div>\n            {captchaUrl && <img src={captchaUrl} alt='captcha' />}\n            {captchaUrl && <div className={s.textInputWhrapper}>{createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], Input)}</div>}\n            <div className={s.checkInputWhrapper}>\n                <div>\n                    {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, { type: 'checkbox' })}\n                    <span>Remember me</span>\n                </div>\n                <button className={s.btn}>Sign in</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({ form: 'login' })(LoginForm)\n\nexport default LoginReduxForm","import s from './Login.module.scss'\nimport LoginReduxForm from './LoginForm'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { login } from '../../redux/authReducer'\nimport { Redirect } from 'react-router'\nimport { AppStateType } from '../../redux/redux-store'\nimport { memo } from 'react'\n\ntype LoginFormValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string | null\n}\n\nexport const LoginPage: React.FC = memo(() => {\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\n\n    const dispatch = useDispatch()\n\n    const onSubmit = (FormData: LoginFormValuesType) => { dispatch(login(FormData.email, FormData.password, FormData.rememberMe, FormData.captcha)) }\n    const onFreeAccount = () => { dispatch(login('andrian.karsanashvili@gmail.com', 'q12345678', false, null)) }\n    \n    if (isAuth) { return <Redirect to={'/profile'} /> }\n\n    return (\n        <div className={s.login}>\n            <div className={s.circlesContainer}>\n                <div className={s.circleSmall}></div>\n                <div className={s.circleMedium}></div>\n                <div className={s.circleLarge}></div>\n                <div className={s.circleXLarge}></div>\n                <div className={s.circleXXLarge}></div>\n            </div>\n            <div className={s.loginWhrapper}>\n                <div className={s.loginForm}>\n                    <h1 className={s.heading}>Sign in</h1>\n                    <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\n                    <p>You can login with a test account <span onClick={onFreeAccount} className={s.test}>here</span></p>\n                </div>\n            </div>\n        </div>\n    )\n})"],"sourceRoot":""}