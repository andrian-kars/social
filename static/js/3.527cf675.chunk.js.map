{"version":3,"sources":["components/Login/Login.module.scss","components/Login/LoginForm.tsx","components/Login/Login.tsx"],"names":["module","exports","LoginReduxForm","reduxForm","form","handleSubmit","error","captchaUrl","onSubmit","className","s","summaryError","summary","textInputWhrapper","createField","required","Input","type","src","alt","checkInputWhrapper","undefined","btn","connect","state","isAuth","auth","login","props","to","circlesContainer","circleSmall","circleMedium","circleLarge","circleXLarge","circleXXLarge","loginWhrapper","loginForm","heading","FormData","email","password","rememberMe","captcha","onClick","test"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,iBAAmB,gCAAgC,YAAc,2BAA2B,qBAAqB,kCAAkC,aAAe,4BAA4B,YAAc,2BAA2B,aAAe,4BAA4B,cAAgB,6BAA6B,cAAgB,6BAA6B,UAAY,yBAAyB,QAAU,uBAAuB,KAAO,oBAAoB,aAAe,4BAA4B,QAAU,uBAAuB,kBAAoB,iCAAiC,mBAAqB,kCAAkC,IAAM,mBAAmB,QAAU,uBAAuB,KAAO,sB,8FC6CtuBC,EAFQC,YAAkD,CAAEC,KAAM,SAA1DD,EA5BoF,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAC/H,OACI,uBAAMC,SAAUH,EAAcI,UAAWC,IAAEN,KAA3C,UACKE,EACK,qBAAKG,UAAWC,IAAEC,aAAlB,SAAiCL,IACjC,qBAAKG,UAAWC,IAAEE,QAAlB,gFAEN,sBAAKH,UAAWC,IAAEG,kBAAlB,UACI,iDACCC,YAAqC,QAAS,QAAS,CAACC,KAAWC,QAExE,sBAAKP,UAAWC,IAAEG,kBAAlB,UACI,4CACCC,YAAqC,WAAY,WAAY,CAACC,KAAWC,IAAO,CAAEC,KAAM,gBAE5FV,GAAc,qBAAKW,IAAKX,EAAYY,IAAI,YACxCZ,GAAc,qBAAKE,UAAWC,IAAEG,kBAAlB,SAAsCC,YAAqC,qBAAsB,UAAW,CAACC,KAAWC,OACvI,sBAAKP,UAAWC,IAAEU,mBAAlB,UACI,gCACKN,iBAAqCO,EAAW,aAAc,GAAIL,IAAO,CAAEC,KAAM,aAClF,kDAEJ,wBAAQR,UAAWC,IAAEY,IAArB,8B,wBCoBDC,uBALS,SAACC,GAAD,MAA6C,CACjEC,OAAQD,EAAME,KAAKD,OACnBlB,WAAYiB,EAAME,KAAKnB,cAGa,CAAEoB,WAA3BJ,EAnCmD,SAACK,GAO/D,OAAIA,EAAMH,OACC,cAAC,IAAD,CAAUI,GAAI,aAGrB,sBAAKpB,UAAWC,IAAEiB,MAAlB,UACI,sBAAKlB,UAAWC,IAAEoB,iBAAlB,UACI,qBAAKrB,UAAWC,IAAEqB,cAClB,qBAAKtB,UAAWC,IAAEsB,eAClB,qBAAKvB,UAAWC,IAAEuB,cAClB,qBAAKxB,UAAWC,IAAEwB,eAClB,qBAAKzB,UAAWC,IAAEyB,mBAEtB,qBAAK1B,UAAWC,IAAE0B,cAAlB,SACI,sBAAK3B,UAAWC,IAAE2B,UAAlB,UACI,oBAAI5B,UAAWC,IAAE4B,QAAjB,qBACA,cAAC,EAAD,CAAgB9B,SArBf,SAAC+B,GACdX,EAAMD,MAAMY,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UAoB7BpC,WAAYqB,EAAMrB,aACtD,mEAAqC,sBAAMqC,QAnBvC,WAChBhB,EAAMD,MAAM,kCAAmC,aAAa,EAAO,OAkBUlB,UAAWC,IAAEmC,KAAzC","file":"static/js/3.527cf675.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__10IcO\",\"circlesContainer\":\"Login_circlesContainer__1O2xc\",\"circleSmall\":\"Login_circleSmall__1556X\",\"circle-small-scale\":\"Login_circle-small-scale__2CtUd\",\"circleMedium\":\"Login_circleMedium__2AbZe\",\"circleLarge\":\"Login_circleLarge__2USDv\",\"circleXLarge\":\"Login_circleXLarge__3RM8U\",\"circleXXLarge\":\"Login_circleXXLarge__1HAPA\",\"loginWhrapper\":\"Login_loginWhrapper__7qcCT\",\"loginForm\":\"Login_loginForm__32H5B\",\"heading\":\"Login_heading__3r5ix\",\"form\":\"Login_form__1tdal\",\"summaryError\":\"Login_summaryError__1Hlqe\",\"summary\":\"Login_summary__3ffEk\",\"textInputWhrapper\":\"Login_textInputWhrapper__2kqj3\",\"checkInputWhrapper\":\"Login_checkInputWhrapper__1PLcO\",\"btn\":\"Login_btn__3S0Pc\",\"btnFree\":\"Login_btnFree__9RgFv\",\"test\":\"Login_test__1R2wt\"};","import { InjectedFormProps, reduxForm } from 'redux-form'\nimport s from './Login.module.scss'\nimport { createField, GetStringKeys, Input } from '../common/FormsControls/FormsControls'\nimport { required } from '../../utils/validators'\n\ntype LoginFormValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string | null\n}\n\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\n\ntype LoginFormOwnProps = { captchaUrl: string | null }\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({ handleSubmit, error, captchaUrl }) => {\n    return (\n        <form onSubmit={handleSubmit} className={s.form}>\n            {error\n                ? <div className={s.summaryError}>{error}</div> \n                : <div className={s.summary}>Enter your email address and password or use free account for test</div>\n            }\n            <div className={s.textInputWhrapper}>\n                <span>Email address</span>\n                {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], Input)}\n            </div>\n            <div className={s.textInputWhrapper}>\n                <span>Password</span>\n                {createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, { type: 'password'})}\n            </div>\n            {captchaUrl && <img src={captchaUrl} alt='captcha' />}\n            {captchaUrl && <div className={s.textInputWhrapper}>{createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], Input)}</div>}\n            <div className={s.checkInputWhrapper}>\n                <div>\n                    {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, { type: 'checkbox' })}\n                    <span>Remember me</span>\n                </div>\n                <button className={s.btn}>Sign in</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({ form: 'login' })(LoginForm)\n\nexport default LoginReduxForm","import s from './Login.module.scss'\nimport LoginReduxForm from './LoginForm'\nimport { connect } from 'react-redux'\nimport { login } from './../../redux/authReducer'\nimport { Redirect } from 'react-router'\nimport { AppStateType } from '../../redux/redux-store'\n\ntype MapStatePropsType = {\n    isAuth: boolean\n    captchaUrl: string | null\n}\n\ntype MapDispatchPropsType = {\n    login: (email: string, password: string, rememberMe: boolean, captcha: string | null) => void\n}\n\ntype LoginFormValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string | null\n}\n\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\n    const onSubmit = (FormData: LoginFormValuesType) => {\n        props.login(FormData.email, FormData.password, FormData.rememberMe, FormData.captcha)\n    }\n    const freeAccount = () => {\n        props.login('andrian.karsanashvili@gmail.com', 'q12345678', false, null)\n    }\n    if (props.isAuth) {\n        return <Redirect to={'/profile'} />\n    }\n    return (\n        <div className={s.login}>\n            <div className={s.circlesContainer}>\n                <div className={s.circleSmall}></div>\n                <div className={s.circleMedium}></div>\n                <div className={s.circleLarge}></div>\n                <div className={s.circleXLarge}></div>\n                <div className={s.circleXXLarge}></div>\n            </div>\n            <div className={s.loginWhrapper}>\n                <div className={s.loginForm}>\n                    <h1 className={s.heading}>Sign in</h1>\n                    <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\n                    <p>You can login with a test account <span onClick={freeAccount} className={s.test}>here</span></p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\n    isAuth: state.auth.isAuth,\n    captchaUrl: state.auth.captchaUrl\n})\n\nexport default connect(mapStateToProps, { login })(Login)"],"sourceRoot":""}